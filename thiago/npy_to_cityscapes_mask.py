import json
from pathlib import Path
from typing import Dict, List

import cv2
import numpy as np
from numpy.typing import NDArray

MASK_SHAPE = (300, 300)

BACKGROUND_LABEL = 0
ROAD_LABEL = 1
ROAD_SIDE_LABEL = 2


def create_task_id_to_filenames_map(json_path: Path) -> Dict[int, str]:
    """
    Json generated by "label-studio" export function.
    """

    json_dict = json.loads(json_path)

    task_id_to_filenames = {}

    for entry in json_dict:
        task_id = entry["id"]
        upload_filename = entry["image"]
        _, original_filename = upload_filename.split("-")

        assert isinstance(task_id, int)
        assert isinstance(original_filename, str)
        task_id_to_filenames[task_id] = original_filename

    return task_id_to_filenames


def load_road_masks(task_id: int, npys_dir: Path) -> NDArray[np.uint8]:
    task_paths = npys_dir.glob(f"task-{task_id}*.npy")
    road_paths = [
        p for p in task_paths if "road" in p.stem and "road-side" not in p.stem
    ]

    assert len(road_paths)

    final_mask = np.zeros(shape=MASK_SHAPE, dtype=np.uint8)

    for p in road_paths:
        mask = np.load(p)
        assert mask.shape == MASK_SHAPE
        final_mask[np.nonzero(mask)] = 1

    return final_mask


def load_road_side_masks(task_id: int, npys_dir: Path) -> NDArray[np.uint8]:
    task_paths = npys_dir.glob(f"task-{task_id}*.npy")
    road_side_paths = [p for p in task_paths if "road-side" in p.stem]
    assert len(road_side_paths)

    final_mask = np.zeros(shape=MASK_SHAPE, dtype=np.uint8)

    for p in road_side_paths:
        mask = np.load(p)
        assert mask.shape == MASK_SHAPE

        final_mask[np.nonzero(mask)] = 1

    return final_mask


def create_mask(task_id: int, npy_dirs: Path) -> NDArray[np.uint8]:
    """
    Aassumes that there are two annotated classes: "road" and "road-side".
    It also assumes that there is a third, implicitly defined class: "unannotated",
    which means background, not enough data, or irrelevant.

    values:
    - 0: unannotated
    - 1: road
    - 2: roadside
    """

    road_mask = load_road_masks(task_id, npy_dirs)
    roadside_mask = load_road_side_masks(task_id, npy_dirs)

    # sanity check
    assert not np.all(road_mask == roadside_mask)

    final_mask = np.full(shape=MASK_SHAPE, fill_value=BACKGROUND_LABEL, dtype=np.uint8)
    final_mask[np.nonzero(road_mask)] = ROAD_LABEL
    final_mask[np.nonzero(roadside_mask)] = ROAD_SIDE_LABEL

    return final_mask


def main() -> None:
    json_path = Path(
        "/home/thiago/Downloads/project-5-at-2023-12-22-15-15-6581f9e6.json"
    )
    npys_dir = Path("/home/thiago/Downloads/project-5-at-2023-12-22-02-34-e01ab07a")
    output_dir = Path(
        "/home/thiago/source/daedalus/luminar/datasets/road_segmentation/with_masks/subset-0123/masks-pny"
    )

    task_id_to_filenames = create_task_id_to_filenames_map(json_path.read_bytes())

    for task_id, input_filename in task_id_to_filenames.items():
        mask = create_mask(task_id, npys_dir)
        output_path = (output_dir / input_filename).with_suffix(".png")
        cv2.imwrite(str(output_path), mask)


if __name__ == "__main__":
    main()
